/sys/
=====

Boot loader and kernel.

Structure
---------

The way objects and libraries are linked for the boot loader and for the kernel
are respectively defined by the linker scripts bootloader.ld and kernel.ld.

The following is a list of targets which describes where they are defined and
how they depend on each other.

* libarch.a

The target libarch.a is a standalone static library defined by the header files
in arch/ARCH/include/ and their implementations in arch/ARCH/lib/.

* libsys.a

The target libsys.a is a static library dependent on libarch.a defined by the
header files in include/ and their implementations in lib/.

* bootloader.o

The target bootloader.o is a relocatable object which contains the primary
implementation of the boot loader. It depends on libarch.a and libsys.a. It
defines the bmain symbol, which should be called by the main
architecture-dependent entry point.

* kernel.o

The target kernel.o is like bootloader.o, only for the kernel. It defines the
kmain symbol, which should be called by the main architecture-dependent entry
point, passing the void *kstart pointer argument. This argument is the start
address of the kernel code and should have been provided by the boot loader.

* archbootloader.o

The target archbootloader.o is a relocatable object which defines the main
entry point of the boot loader. It depends on libarch.a, libsys.a and
bootloader.o.

* archkernel.o

The target archkernel.o is like archbootloader.o, only for the kernel. Their
dependencies are the same, with the exception that it relies on kernel.o
instead of bootloader.o.

* bootloader.out, bootloader.bin, kernel.out, kernel.bin

The main targets are bootloader.out, stripped to bootloader.bin, which links
archbootloader.o with all its dependencies, and kernel.out, stripped to
kernel.bin, which does the same with archkernel.o.

* sys.bin

The OUT target sys.bin is made by concatenating bootloader.bin with kernel.bin.
