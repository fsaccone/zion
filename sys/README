/sys/
=====

The boot loader and kernel.

Structure
---------

* libarch.a

The target libarch.a is a standalone static library defined by the header files
in arch/ARCH/include/ and their implementations in arch/ARCH/lib/.

* libsys.a

The target libsys.a is a static library dependent on libarch.a defined by the
header files in include/ and their implementations in lib/.

* boot.o

The target boot.o is a relocatable object which contains the primary
implementation of the boot loader. It depends on libarch.a and libsys.a. It
defines the bmain symbol, which should be called by the main
architecture-dependent entry point.

* kernel.o

The target kernel.o is like boot.o, only for the kernel. It defines the kmain
symbol, which should be called by the main architecture-dependent entry point,
passing the void *kstart pointer argument. This argument is the start address
of the kernel code and should have been provided by the boot loader.

* archboot.o

The target archboot.o is a relocatable object which defines the main entry
point of the boot loader. It depends on libarch.a, libsys.a and boot.o.

* archkernel.o

The target archkernel.o is like archboot.o, only for the kernel. Their
dependencies are the same, with the exception that it relies on kernel.o
instead of boot.o.

* boot.out, boot.bin, kernel.out, kernel.bin

The main targets are boot.out, stripped to boot.bin, which links archboot.o
with all its dependencies, and kernel.out, stripped to kernel.bin, which does
the same with archkernel.o.

---

The way the objects and libraries are linked for the boot loader and for the
kernel are respectively defined in the linker scripts located at
arch/ARCH/boot/linker.ld and arch/ARCH/kernel/linker.ld.
